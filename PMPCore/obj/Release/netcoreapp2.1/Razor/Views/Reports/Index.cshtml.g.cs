#pragma checksum "C:\Users\merve\Desktop\PMP\PMPCore\Views\Reports\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f5cfaf404d27895f03b43b60be3140eb2c0e9829"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Reports_Index), @"mvc.1.0.view", @"/Views/Reports/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Reports/Index.cshtml", typeof(AspNetCore.Views_Reports_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\merve\Desktop\PMP\PMPCore\Views\_ViewImports.cshtml"
using PMPCore;

#line default
#line hidden
#line 2 "C:\Users\merve\Desktop\PMP\PMPCore\Views\_ViewImports.cshtml"
using PMPCore.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f5cfaf404d27895f03b43b60be3140eb2c0e9829", @"/Views/Reports/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4fb46c8f1508255f860685ecf7a4631592682f6c", @"/Views/_ViewImports.cshtml")]
    public class Views_Reports_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/OfflineScripts/core.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/OfflineScripts/charts.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/OfflineScripts/animated.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\merve\Desktop\PMP\PMPCore\Views\Reports\Index.cshtml"
  
    ViewBag.Title = "Proje Yönetim Kokpiti";
    ViewBag.ActivePageName = "Raporlar";

#line default
#line hidden
            BeginContext(95, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(97, 56, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "84c97c5bbadf40f9b52495e9b8fa1701", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(153, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(155, 58, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c79bb24e8af14a4b84ecf38258ecfadd", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(213, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(215, 60, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e74d1e116313425ea87b0a8e62e3238b", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(275, 969, true);
            WriteLiteral(@"
<script src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js""></script>

<div class=""row"" style="""">
    <div class=""col-md-6"">
        <div class=""kpiHeader"" style="""">
            <span>Proje Tamamlanma Oranı</span>
        </div>
        <div class=""kpiBody"" style="""">
            <div style=""width: 95%; height: 350px;"" id=""firstChartDiv""></div>
        </div>
    </div>

    <div class=""col-md-6"">
        <div class=""kpiHeader"" style="""">
            <span>Proje Adam / Gün Sayıları</span>
        </div>
        <div class=""kpiBody"" style="""">
            <div style=""width: 95%; height: 350px;"" id=""secondChartDiv""></div>
        </div>
    </div>
</div>
<div class=""row"">
    <div class=""col-md-4"" style=""margin-top: 30px;"">
        <div class=""kpiHeader"" style="""">
            <span>MDM 6 Aylık Performans Raporu</span>
        </div>
        <div class=""kpiBody"" style=""padding-left: 20px; padding-right: 20px;"">
");
            EndContext();
            BeginContext(1327, 349, true);
            WriteLiteral(@"            <canvas id=""thirdChartDiv"" style="""" height=""220""></canvas>
        </div>
    </div>
    <div class=""col-md-4"" style=""margin-top: 30px;"">
        <div class=""kpiHeader"" style="""">
            <span>Lena 6 Aylık Performans Raporu</span>
        </div>
        <div class=""kpiBody"" style=""padding-left: 20px; padding-right: 20px;"">
");
            EndContext();
            BeginContext(1759, 352, true);
            WriteLiteral(@"            <canvas id=""fourthChartDiv"" style="""" height=""220""></canvas>
        </div>
    </div>
    <div class=""col-md-4"" style=""margin-top: 30px;"">
        <div class=""kpiHeader"" style="""">
            <span>Kokpit 6 Aylık Performans Raporu</span>
        </div>
        <div class=""kpiBody"" style=""padding-left: 20px; padding-right: 20px;"">
");
            EndContext();
            BeginContext(2194, 1799, true);
            WriteLiteral(@"            <canvas id=""fifthChartDiv"" style="""" height=""220""></canvas>
        </div>
    </div>
</div>


<style>
    .ps-scrollbar-y-rail {
        top: 30px!important;
        right: 0px!important;
        height: 900px !important;
    }
    .ps-scrollbar-x-rail {
        left: 0px;
        bottom: -71px;
    }
    .kpiHeader {
        border-top: 1px solid #ffffff1a;
        border-left: 1px solid #ffffff1a;
        border-right: 1px solid #ffffff1a;
        width: 100%;
        background-color: #304a5e;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        padding-top: 15px;
        padding-bottom: 15px;
        box-shadow: 0 16px 38px -12px rgba(0, 0, 0, 0.56), 0 4px 25px 0px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2);
    }

    .kpiBody {
        border: 1px solid #ffffff1a;
        width: 100%;
        background-color: #486d89;
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
        padd");
            WriteLiteral(@"ing-top: 15px;
        padding-bottom: 15px;
        box-shadow: 0 16px 38px -12px rgba(0, 0, 0, 0.56), 0 4px 25px 0px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2);
    }

    .kpiHeader span {
        margin-left: 17px;
        font-weight: bold;
        text-transform: uppercase;
        color: white;
        text-shadow: 1px 1px 1px #545454;
        font-size: 17px;
    }

    .rect .peth {
        display: none;
    }
</style>

<script>
    $(document).ready(function () {
        getMilestoneInfo();
        generateSecondChart();
        generateThirdChart();
        generateFourthChart();
        generateFifthChart();
    });
    function getMilestoneInfo() {
        $.ajax({
            type: ""POST"",
            url: '");
            EndContext();
            BeginContext(3994, 41, false);
#line 120 "C:\Users\merve\Desktop\PMP\PMPCore\Views\Reports\Index.cshtml"
             Write(Url.Action("GetMilestoneInfo", "Roadmap"));

#line default
#line hidden
            EndContext();
            BeginContext(4035, 14430, true);
            WriteLiteral(@"',
            data: {},
            dataType: 'json',
            async: false,
            success: function (data) {

                am4core.useTheme(am4themes_animated);
                // Themes end

                var chart = am4core.create(""firstChartDiv"", am4charts.XYChart);

                //var resultData = Json.parse(data);
                var insert = [];

                insert.push({ ""category"": 'Kokpit', ""start"": '2018-07-01', ""end"": '2019-04-15', ""color"": '#26c6da', ""task"": ""Görev"" });
                insert.push({ ""category"": 'Kokpit', ""start"": '2018-07-01', ""end"": '2019-02-20', ""color"": '#006f7d', ""task"": ""Bitiş Yüzdesi"" });
                insert.push({ ""category"": 'MDM', ""start"": '2018-10-01', ""end"": '2019-12-31', ""color"": '#26c6da', ""task"": ""Görev"" });
                insert.push({ ""category"": 'MDM', ""start"": '2018-10-01', ""end"": '2019-04-25', ""color"": '#006f7d', ""task"": ""Bitiş Yüzdesi"" });
                insert.push({ ""category"": 'Lena', ""start"": '2018-11-20', ""end""");
            WriteLiteral(@": '2019-09-11', ""color"": '#26c6da', ""task"": ""Görev"" });
                insert.push({ ""category"": 'Lena', ""start"": '2018-11-20', ""end"": '2019-03-25', ""color"": '#006f7d', ""task"": ""Bitiş Yüzdesi"" });
                insert.push({ ""category"": 'SmartGridCell', ""start"": '2018-02-09', ""end"": '2019-03-17', ""color"": '#26c6da', ""task"": ""Görev"" });
                insert.push({ ""category"": 'SmartGridCell', ""start"": '2018-02-09', ""end"": '2019-03-05', ""color"": '#006f7d', ""task"": ""Bitiş Yüzdesi"" });


                chart.data = insert;

                var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
                categoryAxis.dataFields.category = ""category"";
                categoryAxis.renderer.grid.template.location = 0;
                categoryAxis.renderer.minGridDistance = 1;

                var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
                dateAxis.baseInterval = { count: 1, timeUnit: ""day"" };
                var series1 = chart.series.push(new am4char");
            WriteLiteral(@"ts.ColumnSeries());
                series1.columns.template.width = am4core.percent(80);
                series1.columns.template.tooltipText = ""[bold]{task}"";

                series1.dataFields.openDateX = ""start"";
                series1.dataFields.dateX = ""end"";
                series1.dataFields.categoryY = ""category"";
                series1.columns.template.propertyFields.fill = ""color""; // get color from data
                series1.columns.template.propertyFields.stroke = ""color"";
                series1.columns.template.strokeOpacity = 1;

                //chart.scrollbarX = new am4core.Scrollbar();
                var cellSize = 30;
                //chart.events.on(""datavalidated"", function (ev) {
                //
                //    // Get objects of interest
                //    var chart = ev.target;
                //    var categoryAxis = chart.yAxes.getIndex(0);
                //
                //    // Calculate how we need to adjust chart height
               ");
            WriteLiteral(@" //    var adjustHeight = chart.data.length * cellSize - categoryAxis.pixelHeight;
                //
                //    // get current chart height
                //    var targetHeight = chart.pixelHeight + adjustHeight;
                //
                //    // Set it on chart's container
                //    chart.svgContainer.htmlElement.style.height = targetHeight + ""px"";
                //});

                chart.events.on(""track"", function (ev) {

                    $(""tspan"").removeAttr(""fill"").attr(""fill"", ""white"");
                    var gler = $(""g"");

                    for (var i = 0; i < gler.length; i++) {
                        var stroke = $(gler[i]).attr(""stroke"");
                        var fill = $(gler[i]).attr(""fill"");

                        if (stroke != null && fill == ""none"") {
                            $(gler[i]).removeAttr(""stroke"").attr(""stroke"", ""silver"");
                            $(gler[i]).removeAttr(""stroke-opacity"").attr(""stroke-opacit");
            WriteLiteral(@"y"", ""0.3"");
                        }
                    }
                }, this);

                chart.events.on(""ready"", function (ev) {
                    $(""#chartdiv title"").last().parent().remove()
                    var elems = [];

                    for (var i = 1; i < $(""g[transform='translate(0,0)'] tspan"").length; i++) {
                        elems.push($(""g[transform='translate(0,0)'] tspan"")[i]);
                    }

                    for (var i = 0; i < elems.length; i++) {
                        var dd = elems[i];
                        $(elems[i]).removeAttr(""class"").attr(""class"", ""actionIcon"");
                        $(elems[i]).removeAttr(""onclick"").attr(""onclick"", ""getChartDetail('"" + dd.innerHTML.trim() + ""')"");

                    }

                    $(""tspan"").removeAttr(""fill"").attr(""fill"", ""white"");
                    var gler = $(""g"");

                    for (var i = 0; i < gler.length; i++) {
                        var stroke = $(gler");
            WriteLiteral(@"[i]).attr(""stroke"");
                        var fill = $(gler[i]).attr(""fill"");

                        if (stroke != null && fill == ""none"") {
                            $(gler[i]).removeAttr(""stroke"").attr(""stroke"", ""silver"");
                            $(gler[i]).removeAttr(""stroke-opacity"").attr(""stroke-opacity"", ""0.3"");
                        }
                    }
                });
            },
            error: function (err) {
                swal(""HATA!"")
            }
        });
    }

    function generateSecondChart() {
        am4core.ready(function () {

            // Themes begin
            am4core.useTheme(am4themes_animated);
            // Themes end

            // Create chart instance
            var chart = am4core.create(""secondChartDiv"", am4charts.XYChart);

            // Add data
            chart.data = [{
                ""country"": ""MDM"",
                ""visits"": 60
            }, {
                ""country"": ""Lena"",
                ""v");
            WriteLiteral(@"isits"": 150
            }, {
                ""country"": ""Kokpit"",
                ""visits"": 97
            }, {
                ""country"": ""SmartGridCell"",
                ""visits"": 117
            }];

            chart.colors.list = [
                am4core.color(""#26c6da""),
                am4core.color(""#26c6da""),
                am4core.color(""#26c6da""),
                am4core.color(""#26c6da""),
                am4core.color(""#26c6da""),
                am4core.color(""#26c6da"")
            ];
            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = ""country"";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 30;

            //categoryAxis.renderer.labels.template.adapter.add(""dy"", function (dy, target) {
            //    if (target.dataItem && target.dataItem.index & 2 == 2) {
            //        return dy + 25;
            //    }
            ");
            WriteLiteral(@"//    return dy;
            //});

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            var series = chart.series.push(new am4charts.ColumnSeries());
            series.dataFields.valueY = ""visits"";
            series.dataFields.categoryX = ""country"";
            series.name = ""Visits"";
            series.columns.template.tooltipText = ""{categoryX}: [bold]{valueY}[/]"";
            series.columns.template.fillOpacity = .8;

            var columnTemplate = series.columns.template;
            columnTemplate.strokeWidth = 2;
            columnTemplate.strokeOpacity = 1;
            columnTemplate.stroke = ""#006f7d"";

        }); // end am4core.ready()
    }

    function generateThirdChart() {
        var options = {
            backgroundColor: 'red'
        };

        var myLineChart = new Chart(document.getElementById(""thirdChartDiv""), {
            type: 'line',
            data: {
                labels: ['Ocak', '");
            WriteLiteral(@"Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran'],
                datasets: [{
                    data: [100, 100, 120, 110, 100, 100],
                    label: ""Yazılım"",
                    borderColor: ""white"",
                    fill: false,
                    lineTension: 0,
                },
                {
                    data: [110, 100, 100, 95, 100, 103],
                    label: ""Grafik Tasarım"",
                    borderColor: ""#26c6da"",
                    fill: false,
                    lineTension: 0,
                },
                {
                    data: [100, 100, 98, 107, 100, 98],
                    label: ""Siber Güvenlik"",
                    borderColor: ""#ff008b"",
                    fill: false,
                    lineTension: 0,
                },
                {
                    data: [0, 0, 200, 0, 0, 0],
                    label: """",
                    borderColor: ""transparent"",
                    fill: false,
               ");
            WriteLiteral(@"     lineTension: 0,
                }]
            },
            options: {
                legend: {
                    labels: {
                        fontColor: '#f9f9f9'
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            fontColor: ""#f9f9f9"",
                        },
                        gridLines: {
                            color: '#313131',
                        }
                    }],
                    xAxes: [{
                        gridLines: {
                            color: '#313131'
                        },
                        ticks: {
                            fontColor: ""#f9f9f9"",
                        }
                    }]
                }
            }
        });
    }

    function generateFourthChart() {
        var options = {
            backgroundColor: 'red'
        };

        var myLineChart = new Chart(doc");
            WriteLiteral(@"ument.getElementById(""fourthChartDiv""), {
            type: 'line',
            data: {
                labels: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran'],
                datasets: [{
                    data: [98, 100, 100, 101, 100, 100],
                    label: ""Yazılım"",
                    borderColor: ""white"",
                    fill: false,
                    lineTension: 0,
                },
                {
                    data: [100, 105, 100, 97, 100, 85],
                    label: ""Grafik Tasarım"",
                    borderColor: ""#26c6da"",
                    fill: false,
                    lineTension: 0,
                },
                {
                    data: [97, 98, 99, 100, 96, 98],
                    label: ""Siber Güvenlik"",
                    borderColor: ""#ff008b"",
                    fill: false,
                    lineTension: 0,
                },
                {
                    data: [0, 0, 200, 0, 0, 0],
          ");
            WriteLiteral(@"          label: """",
                    borderColor: ""transparent"",
                    fill: false,
                    lineTension: 0,
                }]
            },
            options: {
                legend: {
                    labels: {
                        fontColor: '#f9f9f9'
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            fontColor: ""#f9f9f9"",
                        },
                        gridLines: {
                            color: '#313131',
                        }
                    }],
                    xAxes: [{
                        gridLines: {
                            color: '#313131'
                        },
                        ticks: {
                            fontColor: ""#f9f9f9"",
                        }
                    }]
                }
            }
        });
    }

    function generateFifthChart(");
            WriteLiteral(@") {
        var options = {
            backgroundColor: 'red'
        };

        var myLineChart = new Chart(document.getElementById(""fifthChartDiv""), {
            type: 'line',
            data: {
                labels: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran'],
                datasets: [{
                    data: [100, 100, 100, 115, 105, 99],
                    label: ""Yazılım"",
                    borderColor: ""white"",
                    fill: false,
                    lineTension: 0,
                },
                {
                    data: [102, 100, 99, 85, 97, 100],
                    label: ""Grafik Tasarım"",
                    borderColor: ""#26c6da"",
                    fill: false,
                    lineTension: 0,
                },
                {
                    data: [85, 95, 102, 110, 100, 99],
                    label: ""Siber Güvenlik"",
                    borderColor: ""#ff008b"",
                    fill: false,
                ");
            WriteLiteral(@"    lineTension: 0,
                },
                {
                    data: [0, 0, 200, 0, 0, 0],
                    label: """",
                    borderColor: ""transparent"",
                    fill: false,
                    lineTension: 0,
                }]
            },
            options: {
                legend: {
                    labels: {
                        fontColor: '#f9f9f9'
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            fontColor: ""#f9f9f9"",
                        },
                        gridLines: {
                            color: '#313131',
                        }
                    }],
                    xAxes: [{
                        gridLines: {
                            color: '#313131'
                        },
                        ticks: {
                            fontColor: ""#f9f9f9"",
                    ");
            WriteLiteral("    }\r\n                    }]\r\n                }\r\n            }\r\n        });\r\n    }\r\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
